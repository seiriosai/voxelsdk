#include "voxelpydll.h"
#include <stdio.h>
#include <CameraSystem.h>
#include <Common.h>

#include <thread>
Voxel::CameraSystem* sys;
Voxel::DepthCameraPtr* depthCamera;
Voxel::DepthFrame deepframe;
Voxel::RawDataFrame toframframe;


int tofInit()
{
	printf(__FUNCTION__);
	Voxel::logger.setDefaultLogLevel(Voxel::LOG_ERROR);
	sys = new Voxel::CameraSystem();
	depthCamera = new Voxel::DepthCameraPtr();
	const Voxel::Vector<Voxel::DevicePtr> &devices = sys->scan();

	if (devices.size() > 0)
		*depthCamera = sys->connect(devices[0]); // Connect to first available device
	else
	{
		std::cerr << "Could not find a compatible device." << std::endl;
		return -1;
	}

	if (!*depthCamera)
	{
		std::cerr << "Could not open a depth camera." << std::endl;
		return -1;
	}
	(*depthCamera)->registerCallback(Voxel::DepthCamera::FRAME_DEPTH_FRAME, [&](Voxel::DepthCamera &dc, const Voxel::Frame &frame, Voxel::DepthCamera::FrameType c) {
		 const Voxel::DepthFrame *d = dynamic_cast<const Voxel::DepthFrame *>(&frame);
		     
		     if(!d)
		     {
		       std::cout << "Null frame captured? or not of type DepthFrame" << std::endl;
		       return;
		     }
			 deepframe = *d;
		     //std::cout << "Capture frame " << d->id << "@" << d->timestamp;
		    
		//     if(lastTimeStamp != 0)
		//       std::cout << " (" << 1E6/(d->timestamp - lastTimeStamp) << " fps)";
		     
		//     std::cout << std::endl;
		     
		//     lastTimeStamp = d->timestamp;
		//     
		//     f.write((char *)d->depth.data(), sizeof(float)*d->size.width*d->size.height);
		//     f.write((char *)d->amplitude.data(), sizeof(float)*d->size.width*d->size.height);
		//     
		//     count++;
		//     
		//     if(count >= 100)
		//       dc.stop();
		   });

	(*depthCamera)->start();
	return 0;
}

void tofDeinit()
{
	if (*depthCamera)
	{
		(*depthCamera)->stop();
	}
}
float* tofReadDepth()
{
	return  deepframe.depth.data();
}
float* tofReadPhase()
{
	return deepframe.amplitude.data();
}
